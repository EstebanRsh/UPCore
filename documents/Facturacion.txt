========================================
DOCUMENTACIÓN: MÓDULO DE FACTURACIÓN
========================================

OBJETIVO GENERAL
----------------
Centralizar y optimizar todas las operaciones financieras relacionadas con cobros a clientes: desde la generación de facturas y registro de pagos, hasta la consulta de historiales y la gestión de deudas.

---

COMPONENTES PRINCIPALES (Vistas del Manager)
--------------------------------------------

1. CENTRO DE COBRANZA (`billing.index`)
   - Vista principal y punto de partida de la operatoria diaria.
   - Inspirada en un dashboard: combina búsqueda de clientes con panel de estadísticas.
   - FUNCIONALIDAD:
     * Búsqueda rápida de clientes para iniciar procesos de cobro.
     * Tabla con datos clave del cliente seleccionado (incluye facturas y últimos pagos).
   - WIDGETS / ESTADÍSTICAS:
     * Ingresos del mes.
     * Cantidad de facturas pendientes.
     * Monto total adeudado.
     * Cantidad de facturas pagadas en el mes.

2. PORTAL DE COBRO (`billing.createInvoice`)
   - Vista dedicada a registrar un nuevo pago para un cliente específico.
   - Presenta la lista de contratos activos del cliente y autocompleta el monto según el plan asociado.
   - Campos clave:
     * Contrato a facturar.
     * Mes de servicio.
     * Monto pagado.
     * Método de pago.
     * Fecha de pago.
     * Notas adicionales.
   - Al guardar:
     * Crea la factura (estado “Pagada”).
     * Registra el pago vinculado.
     * Genera un PDF de recibo y lo guarda en `storage/app/receipts/`.
   - Diseñada para dar al manager contexto completo y minimizar errores de captura.

3. HISTORIAL DE PAGOS (Planificado)
   - Listado completo y filtrable de todos los pagos recibidos de todos los clientes.
   - Uso previsto para contabilidad, auditoría y análisis de ingresos.

4. FACTURAS PENDIENTES (Planificado)
   - Listado de todas las facturas con estado “Pendiente” (de todos los clientes).
   - Herramienta clave para seguimiento y gestión proactiva de morosidad.

---

FLUJO LÓGICO DE DATOS
---------------------
- Un **Cliente** (`clients`) tiene múltiples **Contratos** (`contracts`).
- Un **Contrato** tiene múltiples **Facturas** (`invoices`).
- Una **Factura** puede tener uno o más **Pagos** (`payments`).
- Relaciones principales:
  * Cliente → Contratos: `hasMany` (`cliente_id` como FK).
  * Contrato → Facturas: `hasMany` (`contrato_id` como FK).
  * Factura → Pagos: `hasMany` (`factura_id` como FK).
- El sistema permite obtener facturas y pagos de un cliente utilizando `whereHas` sobre las relaciones, optimizando consultas y evitando datos innecesarios.

---

CONVENCIONES Y NOMENCLATURA
---------------------------
- Nombres de FK en base a idioma y modelo de datos:
  * `cliente_id` en `contracts` para relación con `clients`.
  * `contrato_id` en `invoices` para relación con `contracts`.
  * `factura_id` en `payments` para relación con `invoices`.
- Archivos Blade organizados en subcarpeta `resources/views/billing/manager/` para las vistas del manager.
- Recibos PDF almacenados en `storage/app/receipts/` con nombre: `recibo-{id_factura}-{timestamp}.pdf`.

---

REQUISITOS TÉCNICOS
-------------------
- Laravel 10+ con PHP 8.1+.
- Paquete `barryvdh/laravel-dompdf` para generación de PDFs.
- Columnas necesarias:
  * `pdf_filename` en `invoices` (nullable).
  * `status` en `contracts` para marcar activos/inactivos.
- Rutas protegidas por middleware `auth`, `verified` y `role:manager`.

---
